// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

namespace Persistencia.Migrations
{
    [DbContext(typeof(CRMContext))]
    [Migration("20210828152024_ComentariosTareas")]
    partial class ComentariosTareas
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Dominio.ALERTAS", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("minutosalerta")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId")
                        .IsUnique()
                        .HasFilter("[UsuarioId] IS NOT NULL");

                    b.ToTable("ALERTAS");
                });

            modelBuilder.Entity("Dominio.AUDITORIA", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("accion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("fechadeaccion")
                        .HasColumnType("datetime2");

                    b.Property<string>("filaafectada")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("panel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("tabla")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("usuarionombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("AUDITORIA");
                });

            modelBuilder.Entity("Dominio.BARRIOS", b =>
                {
                    b.Property<Guid>("BARRIO_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CIUDAD_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DESCRIBARRIO")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BARRIO_Id");

                    b.HasIndex("CIUDAD_Id");

                    b.ToTable("BARRIOS");
                });

            modelBuilder.Entity("Dominio.CAMPANAS", b =>
                {
                    b.Property<Guid>("CAMPANA_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CODCAMPANA")
                        .HasColumnType("int");

                    b.Property<string>("DESCRICAMPANA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMPRESACONTRATADA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ESTADOCAMPANA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FECGRA")
                        .HasColumnType("datetime2");

                    b.Property<string>("GEOGRAFIA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NUMCAMPANA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OBJETIVOS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PRESUPUESTO")
                        .HasColumnType("decimal(18,4)");

                    b.Property<Guid?>("TIPOSCAMPANASTIPOCAMPANA_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CAMPANA_Id");

                    b.HasIndex("TIPOSCAMPANASTIPOCAMPANA_Id");

                    b.ToTable("CAMPANAS");
                });

            modelBuilder.Entity("Dominio.CIUDADES", b =>
                {
                    b.Property<Guid>("CIUDAD_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DESCRICIUDAD")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CIUDAD_Id");

                    b.ToTable("CIUDADES");
                });

            modelBuilder.Entity("Dominio.CLIENTES", b =>
                {
                    b.Property<Guid>("CLIENTE_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("APELLIDO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CAMPANASCAMPANA_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CODCLIENTE")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ENTROCOMOPC")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ESTADOCLIENTE")
                        .HasColumnType("int");

                    b.Property<DateTime>("FECGRA")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FECHULTMOD")
                        .HasColumnType("datetime2");

                    b.Property<string>("HOBBY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NOMBRE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NUMCLIENTE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreArchivo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OBSERVACIONES")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PROFESIONORUBRO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RUC")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CLIENTE_Id");

                    b.HasIndex("CAMPANASCAMPANA_Id");

                    b.ToTable("CLIENTES");
                });

            modelBuilder.Entity("Dominio.COMENTARIOSDETAREAS", b =>
                {
                    b.Property<Guid>("comentarioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FECGRA")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TAREAId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("comentario")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("comentarioId");

                    b.HasIndex("TAREAId");

                    b.ToTable("COMENTARIOSDETAREAS");
                });

            modelBuilder.Entity("Dominio.CONTACTOS", b =>
                {
                    b.Property<Guid>("CONTACTO_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("APELLIDO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CLIENTE_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DIRECCION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMAIL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FECGRA")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FECHULTMOD")
                        .HasColumnType("datetime2");

                    b.Property<string>("NOMBRE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OBSERVACIONES")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TELEFONO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("USUARIOP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CONTACTO_Id");

                    b.HasIndex("CLIENTE_Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("CONTACTOS");
                });

            modelBuilder.Entity("Dominio.Categoria", b =>
                {
                    b.Property<Guid>("CategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ruta")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoriaId");

                    b.ToTable("CATEGORIA");
                });

            modelBuilder.Entity("Dominio.DIFUSIONESLEIDAS", b =>
                {
                    b.Property<Guid>("DIFUSION_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FECHALEIDA")
                        .HasColumnType("datetime2");

                    b.Property<string>("LEIDOPOR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("NOTA_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DIFUSION_ID");

                    b.HasIndex("NOTA_Id");

                    b.ToTable("DIFUSIONESLEIDAS");
                });

            modelBuilder.Entity("Dominio.DIRECCIONES", b =>
                {
                    b.Property<Guid>("DIRECCION_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BARRIO_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CIUDAD_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CLIENTE_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CODDIRECCION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DESCRIDIRECCION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DETALLESDIRECCION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SE_ENCUENTRA")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DIRECCION_Id");

                    b.HasIndex("BARRIO_Id");

                    b.HasIndex("CIUDAD_Id");

                    b.HasIndex("CLIENTE_Id");

                    b.ToTable("DIRECCIONES");
                });

            modelBuilder.Entity("Dominio.DIRECCIONESTAREAS", b =>
                {
                    b.Property<Guid>("DIRECCION_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BARRIO_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CIUDAD_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CLIENTE_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CODDIRECCION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DESCRIDIRECCION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DETALLESDIRECCION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SE_ENCUENTRA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TAREA_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DIRECCION_Id");

                    b.HasIndex("BARRIO_Id");

                    b.HasIndex("CIUDAD_Id");

                    b.HasIndex("CLIENTE_Id");

                    b.HasIndex("TAREA_Id");

                    b.ToTable("DIRECCIONESTAREAS");
                });

            modelBuilder.Entity("Dominio.Documento", b =>
                {
                    b.Property<Guid>("DocumentoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Contenido")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FECGRA")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ObjetoReferencia")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DocumentoId");

                    b.ToTable("Documento");
                });

            modelBuilder.Entity("Dominio.Empresas", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("direccion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nombrelogo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nombrenormalizado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("paginaweb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("razonsocial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ruc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("telefono")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Empresas");
                });

            modelBuilder.Entity("Dominio.NOTAS", b =>
                {
                    b.Property<Guid>("NOTA_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ArchivoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DIFUSION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinatarioUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FECGRA")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LEIDO")
                        .HasColumnType("datetime2");

                    b.Property<string>("RemitenteUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Texto")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NOTA_Id");

                    b.ToTable("NOTAS");
                });

            modelBuilder.Entity("Dominio.PANTALLAS", b =>
                {
                    b.Property<Guid>("PANTALLA_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NOMBREPANTALLA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PATH")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SubcategoriaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PANTALLA_Id");

                    b.HasIndex("SubcategoriaId");

                    b.ToTable("PANTALLAS");
                });

            modelBuilder.Entity("Dominio.POSIBLESCLIENTES", b =>
                {
                    b.Property<Guid>("POSIBLECLIENTE_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("APELLIDO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CI")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DIRECCION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EMAIL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FECGRA")
                        .HasColumnType("datetime2");

                    b.Property<string>("HOBBY")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NOMBRE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreArchivo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OBSERVACIONES")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PROFESIONORUBRO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RUC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TELEFONO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ULTIMOMOD")
                        .HasColumnType("datetime2");

                    b.Property<string>("USUARIOPC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("POSIBLECLIENTE_Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("POSIBLESCLIENTES");
                });

            modelBuilder.Entity("Dominio.REDES_CLIENTES", b =>
                {
                    b.Property<Guid>("RED_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CLIENTE_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nick")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RedSocial")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RED_Id");

                    b.HasIndex("CLIENTE_Id");

                    b.ToTable("REDES_CLIENTES");
                });

            modelBuilder.Entity("Dominio.ROLES_PANTALLAS", b =>
                {
                    b.Property<Guid>("PANTALLAId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("PANTALLAId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ROLES_PANTALLAS");
                });

            modelBuilder.Entity("Dominio.Roles", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DESCRIPCIONROL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Dominio.SUGERENCIAS", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FECGRA")
                        .HasColumnType("datetime2");

                    b.Property<string>("estado")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sugerencia")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("SUGERENCIAS");
                });

            modelBuilder.Entity("Dominio.Subcategoria", b =>
                {
                    b.Property<Guid>("SubcategoriaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoriaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ruta")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubcategoriaId");

                    b.HasIndex("CategoriaId");

                    b.ToTable("SUBCATEGORIA");
                });

            modelBuilder.Entity("Dominio.TAREAS", b =>
                {
                    b.Property<Guid>("TAREA_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ALARMA")
                        .HasColumnType("datetime2");

                    b.Property<string>("ASIGNADOPOR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AsignadorId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CANCELADO")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CLIENTESCLIENTE_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("COBROASIGNADO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CODTAREA")
                        .HasColumnType("int");

                    b.Property<DateTime?>("COMENZADO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("COMPLETADO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FECGRA")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FECHACREACION")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FECHAVTO")
                        .HasColumnType("datetime2");

                    b.Property<string>("MOTIVOCANCELACION")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NOTIFICADO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NUMTAREA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("POSIBLECLIENTEId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("POSIBLECOBRO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SINEMPEZAR")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TIPOSTAREASTIPOTAREA_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("USUARIOASIGNADO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TAREA_Id");

                    b.HasIndex("CLIENTESCLIENTE_Id");

                    b.HasIndex("POSIBLECLIENTEId");

                    b.HasIndex("TIPOSTAREASTIPOTAREA_Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("TAREAS");
                });

            modelBuilder.Entity("Dominio.TELEFONOS", b =>
                {
                    b.Property<Guid>("TELEFONO_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CLIENTE_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CODTELEFONO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CONTESTA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DESCRITELEFONO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DETALLESTELEFONO")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TELEFONO_Id");

                    b.HasIndex("CLIENTE_Id");

                    b.ToTable("TELEFONOS");
                });

            modelBuilder.Entity("Dominio.TELEFONOSTAREAS", b =>
                {
                    b.Property<Guid>("TELEFONOTAREA_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CLIENTE_Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CODTELEFONOTAREA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CONTESTA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DESCRITELEFONOTAREA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DETALLESTELEFONOTAREA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TAREA_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TELEFONOTAREA_Id");

                    b.HasIndex("CLIENTE_Id");

                    b.HasIndex("TAREA_Id");

                    b.ToTable("TELEFONOSTAREAS");
                });

            modelBuilder.Entity("Dominio.TIPOSCAMPANAS", b =>
                {
                    b.Property<Guid>("TIPOCAMPANA_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CODTIPOCAMPANA")
                        .HasColumnType("int");

                    b.Property<string>("DESCRITIPOCAMPANA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FECGRA")
                        .HasColumnType("datetime2");

                    b.Property<string>("NUMTIPOCAMPANA")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TIPOCAMPANA_Id");

                    b.ToTable("TIPOSCAMPANAS");
                });

            modelBuilder.Entity("Dominio.TIPOSTAREAS", b =>
                {
                    b.Property<Guid>("TIPOTAREA_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CODTIPOTAREA")
                        .HasColumnType("int");

                    b.Property<string>("DESCRITIPOTAREA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FECGRA")
                        .HasColumnType("datetime2");

                    b.Property<string>("NUMTIPOTAREA")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TIPOTAREA_Id");

                    b.ToTable("TIPOSTAREAS");
                });

            modelBuilder.Entity("Dominio.Usuarios", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FECGRA")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NOMBRECOMPLETO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NUMEROTELEFONO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NUMUSUARIO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Dominio.ALERTAS", b =>
                {
                    b.HasOne("Dominio.Usuarios", "Usuario")
                        .WithOne("HoraDeAlerta")
                        .HasForeignKey("Dominio.ALERTAS", "UsuarioId");
                });

            modelBuilder.Entity("Dominio.AUDITORIA", b =>
                {
                    b.HasOne("Dominio.Usuarios", "Usuario")
                        .WithMany("ListaAudi")
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("Dominio.BARRIOS", b =>
                {
                    b.HasOne("Dominio.CIUDADES", "CIUDAD")
                        .WithMany("BarriosLista")
                        .HasForeignKey("CIUDAD_Id");
                });

            modelBuilder.Entity("Dominio.CAMPANAS", b =>
                {
                    b.HasOne("Dominio.TIPOSCAMPANAS", "TIPOSCAMPANAS")
                        .WithMany("CampanasLista")
                        .HasForeignKey("TIPOSCAMPANASTIPOCAMPANA_Id");
                });

            modelBuilder.Entity("Dominio.CLIENTES", b =>
                {
                    b.HasOne("Dominio.CAMPANAS", "CAMPANAS")
                        .WithMany("ClientesLista")
                        .HasForeignKey("CAMPANASCAMPANA_Id");
                });

            modelBuilder.Entity("Dominio.COMENTARIOSDETAREAS", b =>
                {
                    b.HasOne("Dominio.TAREAS", "TAREA")
                        .WithMany()
                        .HasForeignKey("TAREAId");
                });

            modelBuilder.Entity("Dominio.CONTACTOS", b =>
                {
                    b.HasOne("Dominio.CLIENTES", "CLIENTE")
                        .WithMany("ContactosLista")
                        .HasForeignKey("CLIENTE_Id");

                    b.HasOne("Dominio.Usuarios", "Usuario")
                        .WithMany("ContactosLista")
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("Dominio.DIFUSIONESLEIDAS", b =>
                {
                    b.HasOne("Dominio.NOTAS", "NOTA")
                        .WithMany()
                        .HasForeignKey("NOTA_Id");
                });

            modelBuilder.Entity("Dominio.DIRECCIONES", b =>
                {
                    b.HasOne("Dominio.BARRIOS", "BARRIO")
                        .WithMany()
                        .HasForeignKey("BARRIO_Id");

                    b.HasOne("Dominio.CIUDADES", "CIUDAD")
                        .WithMany()
                        .HasForeignKey("CIUDAD_Id");

                    b.HasOne("Dominio.CLIENTES", "CLIENTE")
                        .WithMany("DireccionesLista")
                        .HasForeignKey("CLIENTE_Id");
                });

            modelBuilder.Entity("Dominio.DIRECCIONESTAREAS", b =>
                {
                    b.HasOne("Dominio.BARRIOS", "BARRIO")
                        .WithMany()
                        .HasForeignKey("BARRIO_Id");

                    b.HasOne("Dominio.CIUDADES", "CIUDAD")
                        .WithMany()
                        .HasForeignKey("CIUDAD_Id");

                    b.HasOne("Dominio.CLIENTES", "CLIENTE")
                        .WithMany()
                        .HasForeignKey("CLIENTE_Id");

                    b.HasOne("Dominio.TAREAS", "TAREA")
                        .WithMany()
                        .HasForeignKey("TAREA_Id");
                });

            modelBuilder.Entity("Dominio.PANTALLAS", b =>
                {
                    b.HasOne("Dominio.Subcategoria", "Subcategoria")
                        .WithMany("PantallasLista")
                        .HasForeignKey("SubcategoriaId");
                });

            modelBuilder.Entity("Dominio.POSIBLESCLIENTES", b =>
                {
                    b.HasOne("Dominio.Usuarios", "Usuario")
                        .WithMany("PosiblesClientesLista")
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("Dominio.REDES_CLIENTES", b =>
                {
                    b.HasOne("Dominio.CLIENTES", "CLIENTE")
                        .WithMany("RedesLista")
                        .HasForeignKey("CLIENTE_Id");
                });

            modelBuilder.Entity("Dominio.ROLES_PANTALLAS", b =>
                {
                    b.HasOne("Dominio.PANTALLAS", "PANTALLA")
                        .WithMany("RolesLista")
                        .HasForeignKey("PANTALLAId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Roles", "Role")
                        .WithMany("PantallasLista")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dominio.SUGERENCIAS", b =>
                {
                    b.HasOne("Dominio.CLIENTES", "Cliente")
                        .WithMany("SugerenciasLista")
                        .HasForeignKey("ClienteId");
                });

            modelBuilder.Entity("Dominio.Subcategoria", b =>
                {
                    b.HasOne("Dominio.Categoria", "Categoria")
                        .WithMany("SubcategoriasLista")
                        .HasForeignKey("CategoriaId");
                });

            modelBuilder.Entity("Dominio.TAREAS", b =>
                {
                    b.HasOne("Dominio.CLIENTES", "CLIENTES")
                        .WithMany("TareasLista")
                        .HasForeignKey("CLIENTESCLIENTE_Id");

                    b.HasOne("Dominio.POSIBLESCLIENTES", "POSIBLECLIENTE")
                        .WithMany("TareasListaPC")
                        .HasForeignKey("POSIBLECLIENTEId");

                    b.HasOne("Dominio.TIPOSTAREAS", "TIPOSTAREAS")
                        .WithMany("TareasLista")
                        .HasForeignKey("TIPOSTAREASTIPOTAREA_Id");

                    b.HasOne("Dominio.Usuarios", "Usuario")
                        .WithMany("TareasLista")
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("Dominio.TELEFONOS", b =>
                {
                    b.HasOne("Dominio.CLIENTES", "CLIENTE")
                        .WithMany("TelefonosLista")
                        .HasForeignKey("CLIENTE_Id");
                });

            modelBuilder.Entity("Dominio.TELEFONOSTAREAS", b =>
                {
                    b.HasOne("Dominio.CLIENTES", "CLIENTE")
                        .WithMany()
                        .HasForeignKey("CLIENTE_Id");

                    b.HasOne("Dominio.TAREAS", "TAREA")
                        .WithMany()
                        .HasForeignKey("TAREA_Id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Dominio.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Dominio.Usuarios", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Dominio.Usuarios", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Dominio.Roles", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Usuarios", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Dominio.Usuarios", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
